{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","goodsLength","goodsVisible","isReversed","sortBy","viewLength","value","setState","target","reset","reverse","sortAlfabetically","sortByLength","viewList","this","visibleGoods","filter","good","length","buttonClasses","sort","good1","good2","localeCompare","className","type","classNames","onClick","onChange","map","Component","ReactDOM","render","document","getElementById"],"mappings":"mPAIMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAUWC,EAAb,4MACEC,MAAyB,CACvBC,YAAa,EACbC,cAAc,EACdC,YAAY,EACZC,OAAQ,IALZ,EAQEC,WAAa,SAACC,GACZ,EAAKC,UAAS,iBAAO,CAAEN,aAAcK,EAAME,OAAOF,WATtD,EAYEG,MAAQ,WACN,EAAKF,SAAS,CACZH,OAAQ,GACRD,YAAY,EACZF,YAAa,KAhBnB,EAoBES,QAAU,WACR,EAAKH,UAAS,SAAAP,GAAK,MAAK,CACtBG,YAAaH,EAAMG,gBAtBzB,EA0BEQ,kBAAoB,WAClB,EAAKJ,SAAS,CAAEH,OAAQ,mBA3B5B,EA8BEQ,aAAe,WACb,EAAKL,SAAS,CAAEH,OAAQ,YA/B5B,EAkCES,SAAW,WACT,IAAQX,EAAiB,EAAKF,MAAtBE,aAEHA,GACH,EAAKK,UAAS,iBAAO,CAAEL,cAAeA,OAtC5C,4CA0CE,WAAqB,IAAD,OAClB,EAKIY,KAAKd,MAJPE,EADF,EACEA,aACAD,EAFF,EAEEA,YACAE,EAHF,EAGEA,WACAC,EAJF,EAIEA,OAEIW,EAAejB,EAAgBkB,QACnC,SAACC,GAAD,OAAUA,EAAKC,QAAUjB,KAErBkB,EAAgB,CACpB,SACA,UACA,cACA,WACA,MACA,iBAkBF,OAfAJ,EAAaK,MAAK,SAACC,EAAOC,GACxB,OAAQlB,GACN,IAAK,gBACH,OAAOiB,EAAME,cAAcD,GAC7B,IAAK,SACH,OAAOD,EAAMH,OAASI,EAAMJ,OAC9B,QACE,OAAO,MAITf,GACFY,EAAaL,UAIb,sBAAKc,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,aAAd,mBAIEtB,EAUE,KARA,wBACEuB,KAAK,SACLD,UAAWE,IAAWP,GACtBQ,QAASb,KAAKD,SAHhB,mBAUJ,yBACEW,UAAU,kBACVI,SAAU,SAACtB,GAAD,OAAW,EAAKD,WAAWC,IAFvC,UAIE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,sBAIJ,sBAAKkB,UAAU,qBAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAU,WAAV,EAAcP,GACzBQ,QAASb,KAAKJ,QAHhB,qBAQA,wBACEe,KAAK,SACLD,UAAWE,IAAU,WAAV,EAAcP,GACzBQ,QAASb,KAAKH,kBAHhB,iCAQA,wBACEc,KAAK,SACLD,UAAWE,IAAU,WAAV,EAAcP,GACzBQ,QAASb,KAAKF,aAHhB,4BAQA,wBACEa,KAAK,SACLD,UAAWE,IAAU,WAAV,EAAcP,GACzBQ,QAASb,KAAKL,MAHhB,sBASDP,GACC,oBAAIsB,UAAU,QAAd,SACGT,EAAac,KAAI,SAAAZ,GAAI,OACpB,oBAAeO,UAAU,wBAAzB,SACGP,GADMA,eArJvB,GAAyBa,aCrBzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d1459a4e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { ChangeEvent, Component, ReactNode } from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  goodsLength: number,\n  goodsVisible: boolean,\n  isReversed: boolean,\n  sortBy: string,\n};\n\nexport class App extends Component<{}, State> {\n  state: Readonly<State> = {\n    goodsLength: 1,\n    goodsVisible: false,\n    isReversed: false,\n    sortBy: '',\n  };\n\n  viewLength = (value: ChangeEvent<HTMLSelectElement>) => {\n    this.setState(() => ({ goodsLength: +value.target.value }));\n  };\n\n  reset = () => {\n    this.setState({\n      sortBy: '',\n      isReversed: false,\n      goodsLength: 1,\n    });\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sortAlfabetically = () => {\n    this.setState({ sortBy: 'alfabetically' });\n  };\n\n  sortByLength = () => {\n    this.setState({ sortBy: 'length' });\n  };\n\n  viewList = () => {\n    const { goodsVisible } = this.state;\n\n    if (!goodsVisible) {\n      this.setState(() => ({ goodsVisible: !goodsVisible }));\n    }\n  };\n\n  render(): ReactNode {\n    const {\n      goodsVisible,\n      goodsLength,\n      isReversed,\n      sortBy,\n    } = this.state;\n    const visibleGoods = goodsFromServer.filter(\n      (good) => good.length >= goodsLength,\n    );\n    const buttonClasses = [\n      'button',\n      'is-info',\n      'is-outlined',\n      'is-small',\n      'box',\n      'is-$white-ter',\n    ];\n\n    visibleGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case 'alfabetically':\n          return good1.localeCompare(good2);\n        case 'length':\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__title\">\n          <h1 className=\"title is-2\">\n            Goods\n          </h1>\n\n          {!goodsVisible\n            ? (\n              <button\n                type=\"button\"\n                className={classNames(buttonClasses)}\n                onClick={this.viewList}\n              >\n                Start\n              </button>\n            )\n            : null}\n\n          <select\n            className=\"select is-small\"\n            onChange={(value) => this.viewLength(value)}\n          >\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n            <option value=\"7\">7</option>\n            <option value=\"8\">8</option>\n            <option value=\"9\">9</option>\n            <option value=\"10\">10</option>\n          </select>\n        </div>\n\n        <div className=\"buttons has-addons\">\n          <button\n            type=\"button\"\n            className={classNames(...buttonClasses)}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(...buttonClasses)}\n            onClick={this.sortAlfabetically}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(...buttonClasses)}\n            onClick={this.sortByLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(...buttonClasses)}\n            onClick={this.reset}\n          >\n            Reset\n          </button>\n        </div>\n\n        {goodsVisible && (\n          <ul className=\"goods\">\n            {visibleGoods.map(good => (\n              <li key={good} className=\"content is-medium box\">\n                {good}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}