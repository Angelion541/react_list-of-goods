{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","selectedMinLength","goodsVisible","isReversed","sortBy","nosort","setMinLength","value","setState","reset","reverse","viewList","this","visibleGoods","filter","good","length","buttonClasses","sort","good1","good2","alfabetically","localeCompare","className","type","classNames","onClick","onChange","element","target","map","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAiBKA,E,kFAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,8BAAAA,E,gBAAAA,E,WAAAA,M,KAaE,IAAME,EAAb,4MACEC,MAAyB,CACvBC,kBAAmB,EACnBC,cAAc,EACdC,YAAY,EACZC,OAAQP,EAASQ,QALrB,EAQEC,aAAe,SAACC,GACd,EAAKC,UAAS,iBAAO,CAAEP,mBAAoBM,OAT/C,EAYEE,MAAQ,WACN,EAAKD,SAAS,CACZJ,OAAQP,EAASQ,OACjBF,YAAY,EACZF,kBAAmB,KAhBzB,EAoBES,QAAU,WACR,EAAKF,UAAS,SAAAR,GAAK,MAAK,CACtBG,YAAaH,EAAMG,gBAtBzB,EA0BEQ,SAAW,WACT,IAAQT,EAAiB,EAAKF,MAAtBE,aAEHA,GACH,EAAKM,UAAS,iBAAO,CAAEN,cAAeA,OA9B5C,4CAkCE,WAAqB,IAAD,OAClB,EAKIU,KAAKZ,MAJPE,EADF,EACEA,aACAD,EAFF,EAEEA,kBACAE,EAHF,EAGEA,WACAC,EAJF,EAIEA,OAGIS,EAAef,EAAgBgB,QACnC,SAACC,GAAD,OAAUA,EAAKC,QAAUf,KAErBgB,EAAgB,CACpB,SACA,UACA,cACA,WACA,MACA,iBAkBF,OAfAJ,EAAaK,MAAK,SAACC,EAAOC,GACxB,OAAQhB,GACN,KAAKP,EAASwB,cACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKvB,EAASmB,OACZ,OAAOG,EAAMH,OAASI,EAAMJ,OAC9B,QACE,OAAO,MAITb,GACFU,EAAaH,UAIb,sBAAKa,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,aAAd,mBAIErB,EAUE,KARA,wBACEsB,KAAK,SACLD,UAAWE,IAAWR,GACtBS,QAASd,KAAKD,SAHhB,mBAUJ,wBACEJ,MAAON,EACPsB,UAAU,kBACVI,SAAU,SAACC,GAAD,OAAa,EAAKtB,aAAasB,EAAQC,OAAOtB,QAH1D,SA/Ce,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAoD3BuB,KAAI,SAAAvB,GAAK,OACrB,wBAAQA,MAAK,UAAKA,GAAlB,SACGA,GAD6BA,WAOtC,sBAAKgB,UAAU,qBAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAWR,GACtBS,QAASd,KAAKF,QAHhB,qBAQA,wBACEc,KAAK,SACLD,UAAWE,IAAWR,GACtBS,QAAS,kBAAM,EAAKlB,SAAS,CAAEJ,OAAQP,EAASwB,iBAHlD,iCAQA,wBACEG,KAAK,SACLD,UAAWE,IAAWR,GACtBS,QAAS,kBAAM,EAAKlB,SAAS,CAAEJ,OAAQP,EAASmB,UAHlD,4BAQA,wBACEQ,KAAK,SACLD,UAAWE,IAAWR,GACtBS,QAASd,KAAKH,MAHhB,sBASDP,GACC,oBAAIqB,UAAU,QAAd,SACGV,EAAaiB,KAAI,SAAAf,GAAI,OACpB,oBAAeQ,UAAU,wBAAzB,SACGR,GADMA,eA1IvB,GAAyBgB,aC3BzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.21b5cc57.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Component, ReactNode } from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alfabetically = 'alfabetically',\n  length = 'length',\n  nosort = '',\n}\n\ntype State = {\n  selectedMinLength: number,\n  goodsVisible: boolean,\n  isReversed: boolean,\n  sortBy: SortType,\n};\n\nexport class App extends Component<{}, State> {\n  state: Readonly<State> = {\n    selectedMinLength: 1,\n    goodsVisible: false,\n    isReversed: false,\n    sortBy: SortType.nosort,\n  };\n\n  setMinLength = (value: string) => {\n    this.setState(() => ({ selectedMinLength: +value }));\n  };\n\n  reset = () => {\n    this.setState({\n      sortBy: SortType.nosort,\n      isReversed: false,\n      selectedMinLength: 1,\n    });\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  viewList = () => {\n    const { goodsVisible } = this.state;\n\n    if (!goodsVisible) {\n      this.setState(() => ({ goodsVisible: !goodsVisible }));\n    }\n  };\n\n  render(): ReactNode {\n    const {\n      goodsVisible,\n      selectedMinLength,\n      isReversed,\n      sortBy,\n    } = this.state;\n    const selectValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const visibleGoods = goodsFromServer.filter(\n      (good) => good.length >= selectedMinLength,\n    );\n    const buttonClasses = [\n      'button',\n      'is-info',\n      'is-outlined',\n      'is-small',\n      'box',\n      'is-$white-ter',\n    ];\n\n    visibleGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.alfabetically:\n          return good1.localeCompare(good2);\n        case SortType.length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__title\">\n          <h1 className=\"title is-2\">\n            Goods\n          </h1>\n\n          {!goodsVisible\n            ? (\n              <button\n                type=\"button\"\n                className={classNames(buttonClasses)}\n                onClick={this.viewList}\n              >\n                Start\n              </button>\n            )\n            : null}\n\n          <select\n            value={selectedMinLength}\n            className=\"select is-small\"\n            onChange={(element) => this.setMinLength(element.target.value)}\n          >\n            {selectValues.map(value => (\n              <option value={`${value}`} key={value}>\n                {value}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"buttons has-addons\">\n          <button\n            type=\"button\"\n            className={classNames(buttonClasses)}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(buttonClasses)}\n            onClick={() => this.setState({ sortBy: SortType.alfabetically })}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(buttonClasses)}\n            onClick={() => this.setState({ sortBy: SortType.length })}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(buttonClasses)}\n            onClick={this.reset}\n          >\n            Reset\n          </button>\n        </div>\n\n        {goodsVisible && (\n          <ul className=\"goods\">\n            {visibleGoods.map(good => (\n              <li key={good} className=\"content is-medium box\">\n                {good}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}